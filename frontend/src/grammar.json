{
    "handle_token": "handle_token",
    "rules": {
        "double_quoted_text": {
            "*#whitespace": "handle_text_create",
            "#text": "handle_text_create",
            "#operator": "handle_text_create",
            "#delimiter!\"(": "handle_text_create",
            "#number": "handle_text_create",
            "@double_quoted_text *#whitespace": "handle_text_append",
            "@double_quoted_text #text": "handle_text_append",
            "@double_quoted_text #operator": "handle_text_append",
            "@double_quoted_text #delimiter!\"(": "handle_text_append",
            "@double_quoted_text #number": "handle_text_append"
        },
        "single_quoted_text": {
            "*#whitespace": "handle_text_create",
            "#text": "handle_text_create",
            "#operator": "handle_text_create",
            "#delimiter!'": "handle_text_create",
            "#number": "handle_text_create",
            "@single_quoted_text *#whitespace": "handle_text_append",
            "@single_quoted_text #text": "handle_text_append",
            "@single_quoted_text #operator": "handle_text_append",
            "@single_quoted_text #delimiter!'": "handle_text_append",
            "@single_quoted_text #number": "handle_text_append"
        },
        "text_part": {
            "*( @expression )": "handle_text_part_substitution",
            "*@double_quoted_text": "handle_pass"
        },
        "text_parts": {
            "*@text_part": "handle_text_parts_create",
            "@text_parts *@text_part": "handle_text_parts_append"
        },
        "string": {
            "*\" *@text_parts \"": "handle_string_pass_middle",
            "*' *@single_quoted_text '": "handle_string_pass_middle",
            "*#text": "handle_pass"
        },
        "closure_arguments": {
            "@closure_arguments , @string": "handle_closure_arguments_append",
            "@string": "handle_closure_arguments_create"
        },
        "leaf": {
            "*#number": "handle_pass",
            "*@string": "handle_pass",
            "*( @expression )": "handle_leaf_substitution",
            "*{ @expressions }": "handle_leaf_closure_independent",
            "*{ @closure_arguments - > @expressions }": "handle_leaf_closure_dependent",
            "@leaf *#number": "handle_leaf_number_append",
            "@leaf *@string": "handle_leaf_string_append",
            "@leaf *( @expression )": "handle_leaf_substitution_append"
        },
        "command": {
            "@command @leaf": "handle_command_append",
            "@leaf": "handle_command_create"
        },
        "pipeline": {
            "@pipeline | @command": "handle_pipeline_append",
            "@command": "handle_pipeline_create"
        },
        "unary": {
            "+ @pipeline": "handle_unary",
            "- @pipeline": "handle_unary",
            "not @pipeline": "handle_unary",
            "$ @pipeline": "handle_unary",
            "@ @pipeline": "handle_unary",
            "@pipeline": "handle_pass"
        },
        "power": {
            "@unary ^ @power": "handle_binary",
            "@unary": "handle_pass"
        },
        "times": {
            "@times * @power": "handle_binary",
            "@times / @power": "handle_binary",
            "@times % @power": "handle_binary",
            "@power": "handle_pass"
        },
        "plus": {
            "@plus + @times": "handle_binary",
            "@plus - @times": "handle_binary",
            "@times": "handle_pass"
        },
        "comparison": {
            "@comparison in @plus": "handle_binary",
            "@comparison < @plus": "handle_binary",
            "@comparison > @plus": "handle_binary",
            "@comparison < = @plus": "handle_binary_long",
            "@comparison > = @plus": "handle_binary_long",
            "@plus": "handle_pass"
        },
        "equality": {
            "@equality = = @comparison": "handle_binary_long",
            "@equality ! = @comparison": "handle_binary_long",
            "@comparison": "handle_pass"
        },
        "high_logic": {
            "@high_logic and @equality": "handle_binary",
            "@high_logic nand @equality": "handle_binary",
            "@equality": "handle_pass"
        },
        "low_logic": {
            "@low_logic or @high_logic": "handle_binary",
            "@low_logic xor @high_logic": "handle_binary",
            "@low_logic xnor @high_logic": "handle_binary",
            "@high_logic": "handle_pass"
        },
        "expression": {
            "@low_logic": "handle_pass"
        },
        "expressions": {
            "@expressions #newline @expression": "handle_expressions_append",
            "@expressions ; @expression": "handle_expressions_append",
            "@expression": "handle_expressions_create"
        }
    }
}